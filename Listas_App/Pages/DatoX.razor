@page "/DatoX"
@using Listas_App.Services
@using Listas_App.Models

<PageTitle>Insertar con Dato X</PageTitle>

<h1>Lista Enlazada Simple</h1>
<div class="row">
    <div class="col-md-3">
        <label>Ingrese Nodo</label>
        <input type="text" name="Valor" @bind-value="Valor" />
        <label>Ingrese Dato X</label>
        <input type="text" name="ValorAux" @bind-value="ValorAux" />
        <label>Ingrese posicion del valor x a eliminar</label>
        <input type="text" name="posicion" @bind-value="posicion" />
    </div>
    <div class="col-md-6 text-end">
        <button class="btn btn-success mb-1" @onclick="AgregarInicio">Agregar nodo al inicio</button>
        <button class="btn btn-success mb-1" @onclick="AgregarFinal">Agregar nodo al final</button>
        <button class="btn btn-outline-success mb-1" @onclick="InsertarAntesDe">Agregar nodo antes de X</button>
        <button class="btn btn-outline-success mb-1" @onclick="InsertarDespuesDe">Agregar nodo despues de X</button>
        <button class="btn btn-danger mb-1" @onclick="EliminarAntesDe">Eliminar nodo antes de X</button>
        <button class="btn btn-danger mb-1" @onclick="EliminarDespuesDe">Eliminar nodo despues de X</button>
        <button class="btn btn-danger mb-1" @onclick="EliminarPosicionDe">Eliminar nodo por su posicion</button>
        <button class="btn btn-outline-warning mb-1" @onclick="Ordenar">Ordenar Lista</button>
        <button class="btn btn-outline-danger mb-1" @onclick="LimpiarLista">Limpiar Lista</button>
    </div>
</div>

<ul>
    @{
        Nodo nodoTemporal = Lista.PrimerNodo;
        while (nodoTemporal != null)
        {
            <li>@nodoTemporal.Informacion</li>
            nodoTemporal = nodoTemporal.Referencia;
        }
    }
</ul>
<h1>@mensaje</h1>
@code {
    public string Valor { get; set; }
    public string ValorAux { get; set; }
    public Lista2_DatoX Lista { get; set; }
    public string mensaje { get; set; }
    public string posicion { get; set; }

    protected override void OnInitialized()
    {
        Lista = new Lista2_DatoX();
        base.OnInitialized();
    }

    public void LimpiarLista()
    {
        Lista.LimpiarLista();
    }

    public void AgregarFinal()
    {
        Lista.AgregarAlFinal(CrearNodo());
        Limpiar();
    }

    public void AgregarInicio()
    {
        Lista.AgregarAlInicio(CrearNodo());
        Limpiar();
    }

    public void InsertarAntesDe()
    {
        Lista.InsertarAntesDe(CrearNodoAux(), CrearNodo());
        Limpiar();
    }

    public void InsertarDespuesDe()
    {
        Lista.InsertarDespuesDe(CrearNodoAux(), CrearNodo());
        Limpiar();
    }

    public void EliminarAntesDe()
    {        
        mensaje = Lista.EliminarAntesDatoX(CrearNodoAux());
        Limpiar();
    }

    public void EliminarDespuesDe()
    {
        mensaje = Lista.EliminarDespuesDatoX(CrearNodoAux());
        Limpiar();
    }

    public void EliminarPosicionDe()
    {
        mensaje = Lista.EliminarNodoEnPosicion(Convert.ToInt32(posicion));
        Limpiar();
    }

    public void Ordenar()
    {
        Lista.OrdenarLista();    
    }

    public void Limpiar()
    {
        Valor = string.Empty;
        ValorAux = string.Empty;
        posicion = string.Empty;
    }

    Nodo CrearNodo()
    {
        Nodo nuevoNodo = new Nodo(Valor);
        return nuevoNodo;

    }

    Nodo CrearNodoAux()
    {
        Nodo auxNodo = new Nodo(ValorAux);
        return auxNodo;
    }
}
